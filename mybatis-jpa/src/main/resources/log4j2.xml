<?xml version="1.0" encoding="UTF-8"?>
<Configuration packages="com.baibu.demand.core">
  <!-- 上面的 packages 是提供给 log4j2 搜索插件的路径, 多个路径用逗号分割 -->

  <!--
    log4j2 配置存在两种模式, 即 concise( 简洁模式 ) 和 strict( 严格模式 )

    本配置使用简洁模式.

    严格模式即严格按照 schema 文件进行编写, 同时有较多特性标签不可用,
    简介模式即标签属性也可以当作一个元素进行编写, 以下为例子:

      简洁模式:

        <Appenders>
          <Console name="developLog" target="SYSTEM_OUT" follow="true">
            <PatternLayout charset="${encoding}" pattern="${logPattern}"/>
            <ThresholdFilter level="info" onMatch="accept" onMismatch="deny"/>
          </Console>
        </Appenders>

      严格模式:

        <Appenders>
          <Appender type="Console" name="developLog">
            <Layout type="PatternLayout">
              <Pattern>${logPattern}</Pattern>
            </Layout>
            <Filters>
              <Filter type="ThresholdFilter" level="info" onMatch="accept" onMismatch="deny"/>
            </Filters>
          </Appender>
        </Appenders>

    其中在严格模式内, charset 设置不可用.

    另外在

    目前文件使用简洁模式, 如若需要严格模式, 需要在 Configuration 标签配置 strict="true" 并且加上对应的 schema 文件路径.
    严格模式配置参考该贴:
      https://stackoverflow.com/questions/13904481/in-log4j2-how-do-i-associate-an-xml-schema-with-log4j2-xml

    log4j2 配置详解:
      http://logging.apache.org/log4j/2.x/manual/configuration.html

    或者上并发编程网查看 log4j2 相关译文( 该链接是搜索结果 ):
      http://ifeve.com/?x=0&y=0&s=log4j2
  -->

  <Properties>
    <Property name="pid">???</Property>

    <!-- 这里是 spring boot 默认日志格式, 仅控制台使用 -->
    <Property name="logPattern">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:pid}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%xwEx
    </Property>

    <!-- 从 bb_order_server 拿来的文件输出格式, 仅文件输出使用 -->
    <Property name="fileLogPattern">%d{yyyy-MM-dd HH:mm:ss.SSS} %c [%thread] %-5level %logger{36} - %msg%n\n</Property>

    <!-- 自定义的拦截器所允许的包, 以下列包名开头的包均可打印 debug 级别日志 -->
    <Property name="allowDebugPackages">com.baibu.demand,org.mybatis.spring,org.apache.ibatis,com.zaxxer.hikari</Property>

    <!-- 注意文件系统权限 -->
    <Property name="logPath">/data/server/tomcat/logs/local</Property>

    <!-- SizeBasedTriggeringPolicy class 初始化时按 byte 计算, 这里设定 98MB 即分割文件 -->
    <Property name="fileSplitSize">98MB</Property>

    <!-- 设定每一天都会新建一份日志文件 -->
    <Property name="fileSplitTime">1</Property>
    <Property name="encoding">UTF-8</Property>

    <!-- 设定 log 的最大存放日期, 30 天以前的 log 会被清除 -->
    <Property name="maxSurviveTime">30d</Property>
  </Properties>

  <Appenders>
    <Console name="developLog" target="SYSTEM_OUT" follow="true">
      <PatternLayout charset="${encoding}" pattern="${logPattern}"/>
      <Filters>
        <Log4j2CustomMasterFilter packages="${allowDebugPackages}"/>
      </Filters>
    </Console>

    <!-- 用于 qa & product 环境的 info 文件输出 -->
    <RollingFile name="infoFile" fileName="${logPath}/demand_info.log"
                 filePattern="${logPath}/demand_info_%d{yyyy-MM-dd}-%i.log">
      <PatternLayout charset="${encoding}" pattern="${fileLogPattern}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="${fileSplitTime}"/>
        <SizeBasedTriggeringPolicy size="${fileSplitSize}"/>
      </Policies>
      <Filters>
        <!-- 仅记录 info 级别信息 -->
        <!-- ThresholdFilter 顺序不可颠倒 !!! -->
        <ThresholdFilter level="error" onMatch="deny" onMismatch="neutral"/>
        <ThresholdFilter level="warn" onMatch="deny" onMismatch="neutral"/>
        <ThresholdFilter level="info" onMatch="accept" onMismatch="deny"/>
      </Filters>
      <DefaultRolloverStrategy>
        <Delete basePath="${logPath}" maxDepth="1">
          <IfFileName glob="demand_info_%d{yyyy-MM-dd}-%i.log"/>
          <IfLastModified age="${maxSurviveTime}"/>
        </Delete>
      </DefaultRolloverStrategy>
    </RollingFile>

    <!-- 用于 qa & product 环境的 warn 文件输出 -->
    <RollingFile name="warnFile" fileName="${logPath}/demand_warn.log"
                 filePattern="${logPath}/demand_warn_%d{yyyy-MM-dd}-%i.log">
      <PatternLayout charset="${encoding}" pattern="${fileLogPattern}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="${fileSplitTime}"/>
        <SizeBasedTriggeringPolicy size="${fileSplitSize}"/>
      </Policies>
      <Filters>
        <!-- 仅记录 warn 级别信息 -->
        <ThresholdFilter level="error" onMatch="deny" onMismatch="neutral"/>
        <ThresholdFilter level="warn" onMatch="accept" onMismatch="deny"/>
      </Filters>
      <DefaultRolloverStrategy>
        <Delete basePath="${logPath}" maxDepth="1">
          <IfFileName glob="demand_warn_%d{yyyy-MM-dd}-%i.log"/>
          <IfLastModified age="${maxSurviveTime}"/>
        </Delete>
      </DefaultRolloverStrategy>
    </RollingFile>

    <!-- 用于 qa & product 环境的 error 文件输出 -->
    <RollingFile name="errorFile" fileName="${logPath}/demand_error.log"
                 filePattern="${logPath}/demand_error_%d{yyyy-MM-dd}-%i.log">
      <PatternLayout charset="${encoding}" pattern="${fileLogPattern}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="${fileSplitTime}"/>
        <SizeBasedTriggeringPolicy size="${fileSplitSize}"/>
      </Policies>
      <Filters>
        <!-- 仅记录 error 级别信息 -->
        <ThresholdFilter level="error" onMatch="accept" onMismatch="deny"/>
      </Filters>
      <DefaultRolloverStrategy>
        <Delete basePath="${logPath}" maxDepth="1">
          <IfFileName glob="demand_error_%d{yyyy-MM-dd}-%i.log"/>
          <IfLastModified age="${maxSurviveTime}"/>
        </Delete>
      </DefaultRolloverStrategy>
    </RollingFile>

    <!-- 总的日志文件 -->
    <RollingFile name="masterFile" fileName="${logPath}/demand_master.log"
                 filePattern="${logPath}/demand_master_%d{yyyy-MM-dd}-%i.log">
      <PatternLayout charset="${encoding}" pattern="${fileLogPattern}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="${fileSplitTime}"/>
        <SizeBasedTriggeringPolicy size="${fileSplitSize}"/>
      </Policies>
      <Filters>
        <!-- 仅记录 info 级别或以上, 或者 debug 级别的 sql 的信息 -->
        <Log4j2CustomMasterFilter packages="${allowDebugPackages}"/>
      </Filters>
      <DefaultRolloverStrategy>
        <Delete basePath="${logPath}" maxDepth="1">
          <IfFileName glob="demand_master_%d{yyyy-MM-dd}-%i.log"/>
          <IfLastModified age="${maxSurviveTime}"/>
        </Delete>
      </DefaultRolloverStrategy>
    </RollingFile>
  </Appenders>

  <Loggers>
    <!-- 这里的 name 属性是指需要拦截的包名, 没有被指定的包所发出的日志将被丢去, * 代表所有包 -->
    <Logger name="*" level="info" includeLocation="false">
      <AppenderRef ref="developLog"/>
    </Logger>

    <Logger name="*" level="debug" includeLocation="false">
      <AppenderRef ref="masterFile"/>
    </Logger>

    <Logger name="*" level="info" includeLocation="false">
      <AppenderRef ref="infoFile"/>
    </Logger>

    <Logger name="*" level="warn" includeLocation="true">
      <AppenderRef ref="warnFile"/>
    </Logger>

    <Logger name="*" level="error" includeLocation="true">
      <AppenderRef ref="errorFile"/>
    </Logger>

    <Root level="debug">
      <AppenderRef ref="developLog"/>
      <!--<AppenderRef ref="masterFile"/>-->
      <!--<AppenderRef ref="infoFile"/>-->
      <!--<AppenderRef ref="warnFile"/>-->
      <!--<AppenderRef ref="errorFile"/>-->
    </Root>
  </Loggers>
</Configuration>